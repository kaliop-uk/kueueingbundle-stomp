language: php

# Sudo: false should make the builds faster, but collides with rabbitmq
sudo: true

php:
  - 5.3
  - 5.4
  - 5.5
#  - 5.6
#  - 7.0
#  - hhvm

env:
  # Test only on versions of Sf that are still supported. See: http://symfony.com/doc/current/contributing/community/releases.html#version-history
  - SYMFONY_VERSION=2.3.* BROKER=apollo
#  - SYMFONY_VERSION=2.6.* BROKER=apollo
#  - SYMFONY_VERSION=2.7.* BROKER=apollo

#  - SYMFONY_VERSION=2.3.* BROKER=rabbitmq
#  - SYMFONY_VERSION=2.6.* BROKER=rabbitmq
#  - SYMFONY_VERSION=2.7.* BROKER=rabbitmq

#  - SYMFONY_VERSION=2.3.* BROKER=activemq
  - SYMFONY_VERSION=2.6.* BROKER=activemq
#  - SYMFONY_VERSION=2.7.* BROKER=activemq

matrix:
  allow_failures:
    # at the moment it gives a core dump because of generation of code coverage...
    #- php: 5.6
    # The tests fail with activemq 5.5, which is the version currently available on Ubuntu 12. And there is no activemq in Ubuntu backports
    - env: SYMFONY_VERSION=2.6.* BROKER=activemq

services:
  - rabbitmq

before_install:
  # This is mandatory or 'apt-get install' calls following will fail
  - sudo apt-get update -qq
  # Install a more recent Xdebug version, as the default one (2.2.7) crashes when generating code coverage
  #- if [ "$TRAVIS_PHP_VERSION" = "5.6" ]; then ./Tests/travis/setup_xdebug.sh; fi
  - ./Tests/travis/setup_broker.sh $BROKER

install:
  - phpenv config-add Tests/travis/zzz_php.ini

  # Disable xdebug for speed (executing composer), but allow us to re-enable it later
  # NB: 'php -i' does not work on hhvm
  - if [ "$TRAVIS_PHP_VERSION" = "hhvm" ]; then export XDEBUG_INI=''; fi
  - if [ "$TRAVIS_PHP_VERSION" != "hhvm" ]; then export XDEBUG_INI=`php -i | grep xdebug.ini | grep home/travis | grep -v '=>' | head -1`; fi
  - export XDEBUG_INI=${XDEBUG_INI/,/}
  - if [ "$XDEBUG_INI" != "" ]; then mv "$XDEBUG_INI" "$XDEBUG_INI.bak"; fi

  - composer self-update
  - composer require --prefer-source --dev symfony/symfony:${SYMFONY_VERSION}
  - composer install

  # Re-enable xdebug for when we need to generate code coverage
  - if [ "$TRAVIS_PHP_VERSION" = "5.6" -a "$XDEBUG_INI" != "" ]; then mv "$XDEBUG_INI.bak" "$XDEBUG_INI"; fi

before_script:
  - cp phpunit.xml.dist phpunit.xml

script:
  - if [ "$TRAVIS_PHP_VERSION" = "5.6" ]; then phpunit --colors --coverage-clover=coverage.clover Tests/phpunit; else phpunit --colors Tests/phpunit; fi

after_failure:
  # Display as much info as we can to help developers
  - if [ "$TRAVIS_PHP_VERSION" != "hhvm" ]; then php -i; fi

after_script:
  # Upload code-coverage to Scrutinizer
  - if [ "$TRAVIS_PHP_VERSION" = "5.6" -a -f coverage.clover ]; then wget https://scrutinizer-ci.com/ocular.phar; fi
  - if [ "$TRAVIS_PHP_VERSION" = "5.6" -a -f coverage.clover ]; then php ocular.phar code-coverage:upload --format=php-clover coverage.clover; fi
  # Upload code-coverage to CodeClimate
  - if [ "$TRAVIS_PHP_VERSION" = "5.6" -a -f coverage.clover ]; then CODECLIMATE_REPO_TOKEN=TOBEGOTTEN ./vendor/bin/test-reporter --coverage-report=coverage.clover; fi

cache:
  directories:
    - $COMPOSER_CACHE_DIR
